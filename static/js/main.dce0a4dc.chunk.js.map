{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","score","highScore","Card","onClick","randomCards","updateScore","id","src","image","alt","App","state","cards","clickedCards","includes","alert","setState","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","randomize","this","map","cardRender","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s7DAceA,G,MAXG,SAACC,GAAD,OACd,yBAAKC,UAAU,aACX,yBAAKA,UAAU,aACX,qCAAU,6BAAV,QACA,iDACA,iEACA,sCAAYD,EAAME,MAAlB,IAAyB,8CAAoBF,EAAMG,UAA1B,UCStBC,G,MAVF,SAACJ,GAAD,OAEP,yBAAKC,UAAU,OACf,uBAAGI,QAAS,kBARF,SAACL,GAChBA,EAAMM,cACNN,EAAMO,YAAYP,EAAMQ,IAMDH,CAAQL,KACxB,yBAAKS,IAAKT,EAAMU,MAAOC,IAAI,GAAGV,UAAU,sB,OC6DjCW,G,iNAjEbC,MAAQ,CACNC,MAAOA,EACPZ,MAAO,EACPC,UAAW,EACXY,aAAc,I,EAIhBR,YAAc,SAACC,GAGT,EAAKK,MAAME,aAAaC,SAASR,IACnCS,MAAM,aACN,EAAKC,SAAS,CAAEhB,MAAO,EAAGa,aAAc,OAKxC,EAAKG,SAAS,CAAEH,aAAa,GAAD,mBAAM,EAAKF,MAAME,cAAjB,CAA+BP,MAC3D,EAAKU,SAAS,CAAEhB,MAAO,EAAKW,MAAMX,MAAQ,IAEtC,EAAKW,MAAMX,OAAS,EAAKW,MAAMV,WACjC,EAAKe,SAAS,CAAEf,UAAW,EAAKU,MAAMX,MAAQ,IAGvB,KAArB,EAAKW,MAAMX,QACb,EAAKgB,SAAS,CAAEhB,MAAO,EAAGC,UAAW,GAAIY,aAAc,GAAID,MAAOA,IAClEG,MAAM,e,EAMZX,YAAc,SAACa,GAEb,IADA,IAAIC,EAAeD,EAAME,OAClB,IAAMD,GAAc,CACzB,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,GAEzCM,EAAiBP,EADrBC,GAAgB,GAEhBD,EAAMC,GAAgBD,EAAMG,GAC5BH,EAAMG,GAAeI,EAEvB,EAAKR,SAAS,CAAES,UAAWb,K,wEAGnB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAWZ,MAAO0B,KAAKf,MAAMX,MAAOC,UAAWyB,KAAKf,MAAMV,YAC1D,yBAAKF,UAAU,aACb,yBAAKA,UAAU,OACZ2B,KAAKf,MAAMC,MAAMe,KAAI,SAAAC,GAAU,OAC9B,yBAAK7B,UAAU,WAAWO,GAAIsB,EAAWtB,IACvC,kBAAC,EAAD,CACEE,MAAOoB,EAAWpB,MAClBJ,YAAa,WAAQ,EAAKA,YAAY,EAAKO,MAAMC,QACjDP,YAAa,WAAQ,EAAKA,YAAYuB,EAAWtB,kB,GA1DjDuB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dce0a4dc.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = (props) => (\n    <div className=\"container\">\n        <div className=\"jumbotron\">\n            <h1>South <br />Park</h1>\n            <h3>React Clicky Game</h3>\n            <p>Click each picture, but only once!</p>\n            <h4>Score: {props.score} <span> High Score: {props.highScore} </span></h4>\n        </div>\n    </div>\n)\n\nexport default Jumbotron;","import React from 'react';\nimport './Card.css';\n\nconst onClick = (props) => {\n\tprops.randomCards();\n\tprops.updateScore(props.id);\n}\n\nconst Card = (props) => (\n    \n      <div className=\"box\">\n      <a onClick={() => onClick(props)}>\n        <img src={props.image} alt=\"\" className=\"img-thumbnail\"/>\n      </a>\n    </div>\n    \n)\n\nexport default Card","import React, { Component } from 'react';\nimport Jumbotron from \"./components/Jumbotron/Jumbotron.js\"\nimport Card from \"./components/Card/Card.js\"\nimport cards from \"./cards.json\"\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    cards: cards,\n    score: 0,\n    highScore: 0,\n    clickedCards: [],\n  }\n\n  // Function to update score\n  updateScore = (id) => {\n\n    // Reset the game if a previously selected card is clicked\n    if (this.state.clickedCards.includes(id)) {\n      alert(\"You lose!\");\n      this.setState({ score: 0, clickedCards: [] })\n    }\n\n    // Push to clickedCards array if not previously selected\n    else {\n      this.setState({ clickedCards: [...this.state.clickedCards, id] })\n      this.setState({ score: this.state.score + 1 })\n      // Determine high score and adjust accordingly\n      if (this.state.score >= this.state.highScore) {\n        this.setState({ highScore: this.state.score + 1 })\n      }\n      // Win condition\n      if (this.state.score === 11) {\n        this.setState({ score: 0, highScore: 12, clickedCards: [], cards: cards })\n        alert(\"You win!\");\n      }\n    }\n  }\n\n  // Randomize cards function\n  randomCards = (array) => {\n    let currentIndex = array.length;\n    while (0 !== currentIndex) {\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    this.setState({ randomize: cards });\n  }\n\n  render() {\n    return (\n      <div>\n        <Jumbotron score={this.state.score} highScore={this.state.highScore} />\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.cards.map(cardRender => (\n              <div className=\"col-md-3\" id={cardRender.id}>\n                <Card\n                  image={cardRender.image}\n                  randomCards={() => { this.randomCards(this.state.cards) }}\n                  updateScore={() => { this.updateScore(cardRender.id) }} />\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}